Option Explicit

Public previousCellAddress As Variant

Sub Worksheet_SelectionChange(ByVal Target As Range)

    If previousCellAddress <> "" Then
        Range(previousCellAddress).Interior.Color = xlNone
    End If
    
    'Highlight the current cell
    If Not Intersect(Target, Range("B2")) Is Nothing Then
        Target.Interior.Color = vbYellow
    End If

    'Save the current cell Address
    previousCellAddress = Target.Address
     
End Sub

Sub Worksheet_Change(ByVal Target As Range)

    Dim fullDate As Variant
    
    If Not Intersect(Target, Me.Range("B2")) Is Nothing Then
        'Temporarily disable events to prevent infinite loop
        Application.EnableEvents = False
        
        'Try to convert the input to a complete valid date
        fullDate = CompleteDate(CStr(Target.text))
        
        'Update the cell with the full date, if valid
        If fullDate <> "Invalid Date" Then
            Target.value = fullDate
        Else
            Call MsgBoxInvalidDate
            Application.EnableEvents = False
                Target.Clearcontents
            Application.EnableEvents = True
                Application.Goto Range(Target.Address)
        End If
    End If
        
Clean_Exit:

    Application.EnableEvents = True

End Sub

Function ValidateAndFormatDate(sDate As String, dDate As Date) As Variant
    
    Debug.Print "As entered : " & sDate
    
    Dim dt As String
    Dim strDateFormat As String
    Dim dayPart As Integer
    Dim monthPart As Integer
    Dim yearPart As Integer
    Dim dateParts() As String
    
    On Error GoTo InvalidDate
    
    'Make sure that the date separator is '-'
    sDate = Replace(sDate, "/", "-")

        'Default parts as as today
    Dim dd, dm, dy As Integer
    dd = Day(dDate)
    dm = Month(dDate)
    dy = Year(dDate)

    'Split the input date in parts
    dateParts = Split(sDate, "-")
    
    If UBound(dateParts) = 2 Then
        dateParts(1) = Format(ReplaceMonthToNumber(dateParts(1)), "00")
        If dateParts(1) = "12" And dateParts(2) = "1899" Then
            dateParts(0) = "01"
            dateParts(1) = Format(dm, "00")
            dateParts(2) = Format(dy, "0000")
        End If
        If dateParts(1) = "01" And dateParts(2) = "1900" Then
            dateParts(1) = Format(dm, "00")
            dateParts(2) = Format(dy, "0000")
        End If
    End If
    
    If UBound(dateParts) = 0 Then
        dayPart = CInt(dateParts(0))
        monthPart = dm
        yearPart = dy
    ElseIf UBound(dateParts) = 1 Then
        dayPart = CInt(dateParts(0))
        monthPart = Format(ReplaceMonthToNumber(dateParts(1)), "00")
        yearPart = dy
    ElseIf UBound(dateParts) = 2 Then
        dayPart = CInt(dateParts(0))
        monthPart = dateParts(1)
        yearPart = dateParts(2)
    Else
        GoTo InvalidDate
    End If

    'Ensure the extracted components match the converted date
    dt = Format(dayPart & "-" & monthPart & "-" & yearPart, "dd-mm-yyyy")
    Debug.Print dt & " ou " & Day(dt) & " " & Month(dt) & " " & Year(dt)
    If Day(dt) = dayPart And Month(dt) = monthPart And Year(dt) = yearPart Then
        ValidateAndFormatDate = CDate(dt)
    Else
        GoTo InvalidDate
    End If
    
    Exit Function

InvalidDate: 'Returns nothing in the date

    ValidateAndFormatDate = ""
    
End Function

Function CompleteDate(dateInput As String) As Variant
    Dim defaultDay As Integer
    Dim defaultMonth As Integer
    Dim defaultYear As Integer
    Dim dayPart As Integer
    Dim monthPart As Integer
    Dim yearPart As Integer
    Dim parsedDate As Date
    Dim parts() As String
    
    'Catch all errors
    On Error GoTo InvalidDate
    
    'Get the current date components
    defaultDay = Day(Date)
    defaultMonth = Month(Date)
    defaultYear = Year(Date)
    
    ' Split the input date into parts, considering different delimiters
    dateInput = Replace(Replace(Replace(dateInput, "/", "-"), ".", "-"), " ", "")
    parts = Split(Replace(dateInput, "-01-1900", ""), "-")
    
    Select Case UBound(parts)
        Case -1
            'Nothing provided
            dayPart = defaultDay       'Use current day
            monthPart = defaultMonth   'Use current month
            yearPart = defaultYear     'Use current year
        Case 0
            'Only day provided
            dayPart = CInt(parts(0))   'Use entered day
            monthPart = defaultMonth   'Use current month
            yearPart = defaultYear     'Use current year
        Case 1
            'Day and month provided
            dayPart = CInt(parts(0))   'Use entered day
            monthPart = CInt(parts(1)) 'Use entered month
            yearPart = defaultYear     'Use current year
        Case 2
            'Day, month, and year provided
            dayPart = CInt(parts(0))   'Use entered day
            monthPart = CInt(parts(1)) 'Use entered month
            yearPart = CInt(parts(2))  'Use entered year
        Case Else
            GoTo InvalidDate
    End Select
    
    'Fine validation taking into consideration leap year AND 75 years (past or future)
    If Fn_ValidateDaySpecificMonth(dayPart, monthPart, yearPart) = False Then
        GoTo InvalidDate
    End If
    
    'Construct the full date
    parsedDate = DateSerial(yearPart, monthPart, dayPart)
    
    'Return a VALID date
    CompleteDate = CDate(parsedDate)
    Exit Function

InvalidDate:

    CompleteDate = "Invalid Date"
    
End Function


Function ConvertDayToDate(dayInput As String) As Variant
    
    Dim currentMonth As Integer
    Dim currentYear As Integer
    Dim fullDate As Date
    
    On Error GoTo InvalidDate
    
    ' Get the current month and year
    currentMonth = Month(Date)
    currentYear = Year(Date)
    
    ' Construct the full date using the current month and year
    fullDate = DateSerial(currentYear, currentMonth, CInt(dayInput))
    
    ' Return the formatted date
    ConvertDayToDate = fullDate
    Exit Function

InvalidDate:

    ConvertDayToDate = "Invalid Date"

End Function
